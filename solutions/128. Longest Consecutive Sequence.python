class Solution(object):
    def longestConsecutive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        return self.sol2(nums)
        
    # set and BFS
    # O(N)
    def sol1(self, nums):
        s = set(nums)
        res = 0
        
        while s:
            curr = s.pop()
            
            q = collections.deque([curr])
            temp = 1
            while q:
                num = q.popleft()
                if num + 1 in s:
                    q.append(num + 1)
                    s.remove(num + 1)
                    temp += 1 
                if num - 1 in s:
                    q.append(num -1)
                    s.remove(num -1)
                    temp += 1
            
            res = max(res, temp)
        
        return res
    
    # sort
    def sol2(self, nums):
        nums = sorted(set(nums))
        
        i, res = 0, 0
        
        while i < len(nums):
            temp = 1
            while i < len(nums) - 1 and nums[i + 1] == nums[i] + 1:
                i += 1
                temp += 1
            i += 1
            res = max(res, temp)
                    
        return res
        
                
                
                                        
        
        
        
